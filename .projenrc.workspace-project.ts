import { SampleDir, TextFile } from "projen";
import {
  NodeProject,
  NodeProjectOptions,
  TrailingComma,
} from "projen/lib/javascript";

import { Eslint } from "./.projenrc.eslint.js";
import { Tsup, TsupOptions } from "./.projenrc.tsup.js";

// import { Unbuild, UnbuildOptions } from "./.projenrc.unbuild.js";

// interface BuildOptions extends UnbuildOptions {
interface BuildOptions extends TsupOptions {
  sampleFiles?: boolean;
}

export interface WorkspaceProjectOptions
  extends Omit<
    NodeProjectOptions,
    "parent" | "defaultReleaseBranch" | "packageManager" | "jest"
  > {
  ava?: boolean;
  lint?: boolean;
  build?: BuildOptions | false;
}

export class WorkspaceProject extends NodeProject {
  public readonly eslint: Eslint | undefined;
  constructor(parent: NodeProject, options: WorkspaceProjectOptions) {
    super({
      parent,
      defaultReleaseBranch: parent.release?.branches[0] ?? "main",
      packageManager: parent.package.packageManager,
      jest: false,
      buildWorkflow: false,
      // depsUpgrade: false,
      entrypoint: "",
      github: false,
      package: false,
      projenrcJs: false,
      publishTasks: false,
      release: false,
      stale: false,
      projenDevDependency: false,
      prettier: true,
      prettierOptions: {
        settings: {
          trailingComma: TrailingComma.ALL,
        },
      },
      ...options,
      readme: {
        contents: [
          `# ${options.name}`,
          ...(options.description ? ["", `${options.description}.`] : []),
          "",
          `[![NPM version](https://img.shields.io/npm/v/${options.name}/latest.svg)](https://www.npmjs.com/package/${options.name})`,
          `[![NPM downloads](https://img.shields.io/npm/dm/${options.name}.svg)](https://www.npmjs.com/package/${options.name})`,
          "",
          "## Installation",
          "",
          "```sh",
          `pnpm add ${options.name}`,
          "```",
          "",
          "## Usage",
          "",
          "```ts",
          `import {} from "${options.name}"`,
          "```",
          "",
        ].join("\n"),
      },
    });

    // for (const task of [
    //   "build",
    //   "clobber",
    //   "compile",
    //   "eject",
    //   "default",
    //   "package",
    //   "post-compile",
    //   "pre-compile",
    //   // "test",
    //   "projen",
    // ]) {
    //   this.removeTask(task);
    // }

    this.removeScript("projen");

    this.package.addField("sideEffects", false);
    this.package.addField("type", "module");
    this.package.addField("engines", {
      node: "^14.13.1 || >=16.0.0",
    });

    if (options.lint !== false) {
      this.eslint = new Eslint(this, {
        prettier: options.prettier ?? true,
        devFiles: ["**/*.test.ts"],
      });
    }

    if (options.build !== false) {
      if (options.build?.sampleFiles !== false) {
        new TextFile(this, "index.ts", {
          lines: [
            '// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".',
            'export * from "./src/index.js";',
            "",
          ],
        });

        new SampleDir(this, "src", {
          files: {
            "index.ts": "export {};\n",
          },
        });
      }

      // new Unbuild(
      //   this,
      //   options.build ?? {
      //     entries: ["src/index"],
      //   },
      // );
      new Tsup(
        this,
        options.build ?? {
          entries: ["src/index.ts"],
        },
      );
    }

    if (options.ava) {
      this.addDevDeps("ava", "cloudy-node");
      this.package.addField("ava", {
        extensions: {
          ts: "module",
        },
        nodeArguments: ["--loader=cloudy-node"],
        files: ["**/*.test.ts"],
        failWithoutAssertions: false,
      });
      // this.removeTask("test");
      // this.addTask("test", {
      //   exec: "ava",
      // });
      this.testTask.exec("ava");
    }
  }
}
